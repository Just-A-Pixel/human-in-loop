version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"   # container-addressable broker (used by other containers)
      - "29092:29092" # host-accessible broker (useful for local CLI)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: workflows
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d workflows"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:7
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@example.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres

 # ---------- Node services (dev) ----------
  forwarder:
    image: node:20
    working_dir: /app
    volumes:
      - ./:/app:cached
      - /app/node_modules
    ports:
      - "4000:4000"   # forwarder port (matches FORWARDER_PORT default 4000)
    environment:
      # App config (override if you prefer .env)
      NODE_ENV: development
      # FORWARDER_PORT: 4000

      # Kafka - inside docker use the container broker address
      KAFKA_BROKER: kafka:9092

      # Postgres (point inside network at postgres service)
      PGHOST: postgres
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: workflows
      PGPOOL_MAX: "10"

      LOG_LEVEL: info
    depends_on:
      - kafka
      - postgres
    command: sh -c "npm install --no-audit --no-fund && npm run dev:forwarder"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:4000 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
  
  materializer-agents:
    image: node:20
    working_dir: /app
    volumes:
      - ./:/app:cached
      - /app/node_modules
    # no ports exposed (materializer runs workers, not an HTTP server)
    environment:
      NODE_ENV: development

      # Kafka (use compose service name + container port)
      KAFKA_BROKER: kafka:9092

      # Postgres (inside compose)
      PGHOST: postgres
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: workflows
      PGPOOL_MAX: "10"

      LOG_LEVEL: info
      # optional identifier used in your app logs
      MATERIALIZER_NAME: MaterializerAgents
    depends_on:
      - kafka
      - postgres
    # Wait for kafka and postgres TCP ports to be reachable, then install deps and run watcher
    command: sh -c "npm install --no-audit --no-fund && npm run dev:materializer_agents"
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep node || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  materializer-humans:
    image: node:20
    working_dir: /app
    volumes:
      - ./:/app:cached
      - /app/node_modules
    # no ports exposed (materializer runs workers, not an HTTP server)
    environment:
      NODE_ENV: development

      # Kafka (use compose service name + container port)
      KAFKA_BROKER: kafka:9092

      # Postgres (inside compose)
      PGHOST: postgres
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: workflows
      PGPOOL_MAX: "10"

      LOG_LEVEL: info
      # optional identifier used in your app logs
      MATERIALIZER_NAME: MaterializerHumans
    depends_on:
      - kafka
      - postgres
    # Wait for kafka and postgres TCP ports to be reachable, then install deps and run watcher
    command: sh -c "npm install --no-audit --no-fund && npm run dev:materializer_humans"
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep node || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  pgdata: